{"remainingRequest":"C:\\Server\\www\\portfolio\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Server\\www\\portfolio\\web\\node_modules\\angular2-text-mask\\dist\\angular2TextMask.js","dependencies":[{"path":"C:\\Server\\www\\portfolio\\web\\node_modules\\angular2-text-mask\\dist\\angular2TextMask.js","mtime":1521964886389},{"path":"C:\\Server\\www\\portfolio\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1518922501563},{"path":"C:\\Server\\www\\portfolio\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518922507228}],"contextDependencies":[],"result":["\"use strict\";\nvar __decorate = /*@__PURE__*/ require(\"tslib\").__decorate;\nvar __metadata = /*@__PURE__*/ require(\"tslib\").__metadata;\nvar __param = /*@__PURE__*/ require(\"tslib\").__param;\nObject.defineProperty(exports, \"__esModule\", { value: true });\nvar core_1 = require(\"@angular/core\");\nvar forms_1 = require(\"@angular/forms\");\nvar textMaskCore_1 = require(\"text-mask-core/dist/textMaskCore\");\nexports.MASKEDINPUT_VALUE_ACCESSOR = {\n    provide: forms_1.NG_VALUE_ACCESSOR,\n    useExisting: core_1.forwardRef(function () { return MaskedInputDirective; }),\n    multi: true\n};\nvar MaskedInputDirective = /*@__PURE__*/ (function () {\n    function MaskedInputDirective(renderer, element) {\n        this.renderer = renderer;\n        this.element = element;\n        this.textMaskConfig = {\n            mask: [],\n            guide: true,\n            placeholderChar: '_',\n            pipe: undefined,\n            keepCharPositions: false,\n        };\n        this._onTouched = function () { };\n        this._onChange = function (_) { };\n    }\n    MaskedInputDirective.prototype.ngOnChanges = function (changes) {\n        this.setupMask(true);\n        if (this.textMaskInputElement !== undefined) {\n            this.textMaskInputElement.update(this.inputElement.value);\n        }\n    };\n    MaskedInputDirective.prototype.writeValue = function (value) {\n        this.setupMask();\n        // set the initial value for cases where the mask is disabled\n        var normalizedValue = value == null ? '' : value;\n        this.renderer.setElementProperty(this.inputElement, 'value', normalizedValue);\n        if (this.textMaskInputElement !== undefined) {\n            this.textMaskInputElement.update(value);\n        }\n    };\n    MaskedInputDirective.prototype.registerOnChange = function (fn) { this._onChange = fn; };\n    MaskedInputDirective.prototype.registerOnTouched = function (fn) { this._onTouched = fn; };\n    MaskedInputDirective.prototype.setDisabledState = function (isDisabled) {\n        this.renderer.setElementProperty(this.element.nativeElement, 'disabled', isDisabled);\n    };\n    MaskedInputDirective.prototype.onInput = function (value) {\n        this.setupMask();\n        if (this.textMaskInputElement !== undefined) {\n            this.textMaskInputElement.update(value);\n            // get the updated value\n            value = this.inputElement.value;\n            // check against the last value to prevent firing ngModelChange despite no changes\n            if (this.lastValue !== value) {\n                this.lastValue = value;\n                this._onChange(value);\n            }\n        }\n    };\n    MaskedInputDirective.prototype.setupMask = function (create) {\n        if (create === void 0) {\n            create = false;\n        }\n        if (!this.inputElement) {\n            if (this.element.nativeElement.tagName === 'INPUT') {\n                // `textMask` directive is used directly on an input element\n                this.inputElement = this.element.nativeElement;\n            }\n            else {\n                // `textMask` directive is used on an abstracted input element, `md-input-container`, etc\n                this.inputElement = this.element.nativeElement.getElementsByTagName('INPUT')[0];\n            }\n        }\n        if (this.inputElement && create) {\n            this.textMaskInputElement = textMaskCore_1.createTextMaskInputElement(Object.assign({ inputElement: this.inputElement }, this.textMaskConfig));\n        }\n    };\n    return MaskedInputDirective;\n}());\n__decorate([\n    core_1.Input('textMask'),\n    __metadata(\"design:type\", Object)\n], MaskedInputDirective.prototype, \"textMaskConfig\", void 0);\nMaskedInputDirective = __decorate([\n    core_1.Directive({\n        host: {\n            '(input)': 'onInput($event.target.value)',\n            '(blur)': '_onTouched()'\n        },\n        selector: '[textMask]',\n        exportAs: 'textMask',\n        providers: [exports.MASKEDINPUT_VALUE_ACCESSOR]\n    }),\n    __param(0, core_1.Inject(core_1.Renderer)), __param(1, core_1.Inject(core_1.ElementRef))\n], MaskedInputDirective);\nexports.MaskedInputDirective = MaskedInputDirective;\nvar TextMaskModule = /*@__PURE__*/ (function () {\n    function TextMaskModule() {\n    }\n    return TextMaskModule;\n}());\nTextMaskModule = __decorate([\n    core_1.NgModule({\n        declarations: [MaskedInputDirective],\n        exports: [MaskedInputDirective]\n    })\n], TextMaskModule);\nexports.TextMaskModule = TextMaskModule;\nvar textMaskCore_2 = require(\"text-mask-core/dist/textMaskCore\");\nexports.conformToMask = textMaskCore_2.conformToMask;\n",null]}