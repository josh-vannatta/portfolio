{"remainingRequest":"C:\\Server\\www\\portfolio\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js??ref--3-1!C:\\Server\\www\\portfolio\\web\\node_modules\\prismjs\\components\\prism-django.js","dependencies":[{"path":"C:\\Server\\www\\portfolio\\web\\node_modules\\prismjs\\components\\prism-django.js","mtime":1522877962997},{"path":"C:\\Server\\www\\portfolio\\web\\node_modules\\cache-loader\\dist\\cjs.js","mtime":1518922501563},{"path":"C:\\Server\\www\\portfolio\\web\\node_modules\\@angular-devkit\\build-optimizer\\src\\build-optimizer\\webpack-loader.js","mtime":1518922507228}],"contextDependencies":[],"result":["// Django/Jinja2 syntax definition for Prism.js <http://prismjs.com> syntax highlighter.\n// Mostly it works OK but can paint code incorrectly on complex html/template tag combinations.\n\nvar _django_template = {\n\t'property': {\n\t\tpattern: /(?:{{|{%)[\\s\\S]*?(?:%}|}})/g,\n\t\tgreedy: true,\n\t\tinside: {\n\t\t\t'string': {\n\t\t\t\tpattern: /(\"|')(?:\\\\.|(?!\\1)[^\\\\\\r\\n])*\\1/,\n\t\t\t\tgreedy: true\n\t\t\t},\n\t\t\t'keyword': /\\b(?:\\||load|verbatim|widthratio|ssi|firstof|for|url|ifchanged|csrf_token|lorem|ifnotequal|autoescape|now|templatetag|debug|cycle|ifequal|regroup|comment|filter|endfilter|if|spaceless|with|extends|block|include|else|empty|endif|endfor|as|endblock|endautoescape|endverbatim|trans|endtrans|[Tt]rue|[Ff]alse|[Nn]one|in|is|static|macro|endmacro|call|endcall|set|endset|raw|endraw)\\b/,\n\t\t\t'operator' : /[-+=]=?|!=|\\*\\*?=?|\\/\\/?=?|<[<=>]?|>[=>]?|[&|^~]|\\b(?:or|and|not)\\b/,\n\t\t\t'function': /\\b(?:_|abs|add|addslashes|attr|batch|callable|capfirst|capitalize|center|count|cut|d|date|default|default_if_none|defined|dictsort|dictsortreversed|divisibleby|e|equalto|escape|escaped|escapejs|even|filesizeformat|first|float|floatformat|force_escape|forceescape|format|get_digit|groupby|indent|int|iriencode|iterable|join|last|length|length_is|linebreaks|linebreaksbr|linenumbers|list|ljust|lower|make_list|map|mapping|number|odd|phone2numeric|pluralize|pprint|random|reject|rejectattr|removetags|replace|reverse|rjust|round|safe|safeseq|sameas|select|selectattr|sequence|slice|slugify|sort|string|stringformat|striptags|sum|time|timesince|timeuntil|title|trim|truncate|truncatechars|truncatechars_html|truncatewords|truncatewords_html|undefined|unordered_list|upper|urlencode|urlize|urlizetrunc|wordcount|wordwrap|xmlattr|yesno)\\b/,\n\t\t\t'important': /\\b-?\\d+(?:\\.\\d+)?\\b/,\n\t\t\t'variable': /\\b\\w+?\\b/,\n\t\t\t'punctuation' : /[[\\];(),.:]/\n\t\t}\n\t}\n};\n\nPrism.languages.django = Prism.languages.extend('markup', {'comment': /(?:<!--|{#)[\\s\\S]*?(?:#}|-->)/});\n// Updated html tag pattern to allow template tags inside html tags\nPrism.languages.django.tag.pattern = /<\\/?(?!\\d)[^\\s>\\/=$<]+(?:\\s+[^\\s>\\/=]+(?:=(?:(\"|')(?:\\\\[\\s\\S]|(?!\\1)[^\\\\])*\\1|[^>=]+))?)*\\s*\\/?>/i;\nPrism.languages.insertBefore('django', 'entity', _django_template);\nPrism.languages.insertBefore('inside', 'tag', _django_template, Prism.languages.django.tag);\n\nif (Prism.languages.javascript) {\n\t// Combine js code and template tags painting inside <script> blocks\n\tPrism.languages.insertBefore('inside', 'string', _django_template, Prism.languages.django.script);\n\tPrism.languages.django.script.inside.string.inside = _django_template;\n}\nif (Prism.languages.css) {\n\t// Combine css code and template tags painting inside <style> blocks\n\tPrism.languages.insertBefore('inside', 'atrule', {'tag': _django_template.property}, Prism.languages.django.style);\n\tPrism.languages.django.style.inside.string.inside = _django_template;\n}\n\n// Add an Jinja2 alias\nPrism.languages.jinja2 = Prism.languages.django;\n",null]}